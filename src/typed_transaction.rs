use anchor_lang::prelude::*;
use borsh::BorshDeserialize;

use crate::{SignedInstruction, SignedTransaction};

/// # FromAccountMetas
///
/// Derived by the TypedAccounts derive macro, FromAccountMetas provides signers and mutability checks against a Vec<AccountMeta>, failing if any signers or mutability constraints are not met, and otherwise returning a typed struct of accounts.
pub trait FromAccountMetas: Sized {
    fn from_account_metas(account_metas: &[AccountMeta]) -> Result<Self>;
}

pub trait FromSignedTransaction: Sized {
    fn from_signed_transaction(transaction: &SignedTransaction) -> Result<Self>;
}

pub trait VariableDiscriminator {
    const DISCRIMINATOR: &'static [u8];
}

pub trait InstructionOwner {
    fn check_owner(pubkey: &Pubkey) -> Result<()>;
}

pub trait DeserializeWithDiscriminator: Sized {
    fn try_deserialize(bytes: &[u8]) -> Result<Self>;
}

#[derive(Clone, Debug)]
pub struct TypedInstruction<
    A: FromAccountMetas,
    I: BorshDeserialize + DeserializeWithDiscriminator + VariableDiscriminator + InstructionOwner,
> {
    pub program_id: Pubkey,
    pub accounts: A,
    pub args: I,
}

impl<
        A: FromAccountMetas,
        I: BorshDeserialize + DeserializeWithDiscriminator + VariableDiscriminator + InstructionOwner,
    > TryFrom<&SignedInstruction> for TypedInstruction<A, I>
{
    type Error = anchor_lang::error::Error;

    fn try_from(value: &SignedInstruction) -> Result<Self> {
        I::check_owner(&value.program_id)?;
        Ok(Self {
            program_id: value.program_id,
            accounts: A::from_account_metas(value.accounts.as_slice())?,
            args: I::try_deserialize(&value.data)?,
        })
    }
}

#[cfg(test)]
mod tests {
    #[cfg(feature = "anchor")]
    use anchor_lang::pubkey;

    use crate::{SignedTransaction, TransactionHeader};
    #[cfg(not(feature = "anchor"))]
    use solana_program::pubkey;
    use typed_transaction_macros::{typed_instruction, FromSignedTransaction, TypedAccounts};

    use super::*;

    #[derive(TypedAccounts, Debug)]
    pub struct FinalizeAccounts {
        #[account(mut, signer)]
        pub signer: Pubkey,
        #[account(mut)]
        pub payee: Pubkey,
        #[account(mut)]
        pub channel: Pubkey,
        #[account(mut)]
        pub nonce: Pubkey,
        pub system_program: Pubkey,
        pub recent_blockhashes: Pubkey,
        pub rent: Pubkey,
    }

    #[typed_instruction]
    pub struct Resolve {
        pub counter: u64,
        pub amount: u64,
    }

    pub const COMPUTE_ID: Pubkey = pubkey!("ComputeBudget111111111111111111111111111111");

    #[typed_instruction(discriminator = [0x02], owner = COMPUTE_ID)]
    pub struct SetComputeUnitLimit {
        pub units: u32,
    }

    #[typed_instruction(owner = COMPUTE_ID, discriminator = [0x03])]
    pub struct SetComputeUnitPrice {
        pub microlamports: u64,
    }

    #[derive(TypedAccounts, Debug)]
    pub struct ComputeBudgetAccounts {}

    #[derive(FromSignedTransaction, Debug)]
    pub struct FinalizeTransaction {
        pub header: TransactionHeader,
        pub recent_blockhash: [u8; 32],
        pub set_compute_price: TypedInstruction<ComputeBudgetAccounts, SetComputeUnitPrice>,
        pub set_compute_units: TypedInstruction<ComputeBudgetAccounts, SetComputeUnitLimit>,
        pub finalize: TypedInstruction<FinalizeAccounts, Resolve>,
    }

    #[test]
    fn deserialize() {
        let sigix = [
            0x01, 0x00, 0x10, 0x00, 0xff, 0xff, 0x54, 0x00, 0xff, 0xff, 0x50, 0x00, 0x7b, 0x01,
            0xff, 0xff, 0x94, 0x9b, 0x2c, 0x98, 0xe6, 0x4f, 0xb0, 0x96, 0x1a, 0x44, 0x00, 0xc9,
            0x5d, 0xd6, 0xfb, 0xe9, 0x91, 0xae, 0x7c, 0x7a, 0x12, 0xc5, 0x67, 0x09, 0x86, 0x31,
            0x6f, 0x35, 0x23, 0x4d, 0x3d, 0x82, 0xc5, 0x7d, 0x7f, 0xaa, 0x98, 0xfd, 0xf3, 0xdc,
            0x7b, 0xab, 0xa2, 0xd6, 0x0a, 0xf0, 0xe8, 0x97, 0x7c, 0x5b, 0xbe, 0x98, 0x03, 0x7e,
            0x38, 0xae, 0xa7, 0x35, 0x9f, 0x87, 0xbc, 0xba, 0x20, 0x0f, 0x01, 0x00, 0x05, 0x09,
            0xd2, 0x04, 0xc6, 0xd9, 0x47, 0x57, 0x21, 0xd4, 0xe2, 0x97, 0x1b, 0x56, 0x68, 0x1a,
            0x28, 0x2b, 0x24, 0xad, 0x37, 0x81, 0xbf, 0x7f, 0xfd, 0x33, 0xe5, 0x19, 0x10, 0x7d,
            0x13, 0xef, 0xa1, 0x9c, 0x12, 0x64, 0xd6, 0x2c, 0x9b, 0x73, 0xe8, 0xc9, 0x24, 0xd8,
            0x37, 0xd8, 0x36, 0x21, 0x63, 0xad, 0x20, 0x9e, 0x38, 0x56, 0x14, 0x80, 0x47, 0x7d,
            0xdc, 0x5f, 0x95, 0x86, 0x9c, 0x76, 0x21, 0x60, 0xcc, 0x01, 0x21, 0xa2, 0xb0, 0x81,
            0xea, 0xe8, 0x30, 0x4b, 0x15, 0xc4, 0x2f, 0x4d, 0x69, 0x58, 0x7f, 0xf0, 0x26, 0x63,
            0xc7, 0x6c, 0xa8, 0xb8, 0xc4, 0xb4, 0x47, 0x8f, 0xad, 0x82, 0xd8, 0x06, 0xf1, 0x80,
            0x66, 0x8f, 0xed, 0xe9, 0x52, 0x84, 0x57, 0x4c, 0xc6, 0xf8, 0xa6, 0x76, 0x4c, 0x51,
            0x17, 0x1f, 0x34, 0x3d, 0xc7, 0x4f, 0x3f, 0xdc, 0x20, 0x0f, 0x69, 0x65, 0x81, 0x78,
            0x5f, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32,
            0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7,
            0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x00, 0x00, 0x00, 0xeb, 0x24, 0x67, 0xa8,
            0x33, 0xcc, 0x03, 0xb9, 0xcd, 0xa9, 0xa8, 0x59, 0x8d, 0xe5, 0x0c, 0xfa, 0x32, 0xda,
            0x7e, 0x97, 0x3a, 0x12, 0xb1, 0xff, 0xe5, 0x97, 0x78, 0x6c, 0xc0, 0x29, 0xae, 0x16,
            0x06, 0xa7, 0xd5, 0x17, 0x19, 0x2c, 0x56, 0x8e, 0xe0, 0x8a, 0x84, 0x5f, 0x73, 0xd2,
            0x97, 0x88, 0xcf, 0x03, 0x5c, 0x31, 0x45, 0xb2, 0x1a, 0xb3, 0x44, 0xd8, 0x06, 0x2e,
            0xa9, 0x40, 0x00, 0x00, 0x06, 0xa7, 0xd5, 0x17, 0x19, 0x2c, 0x5c, 0x51, 0x21, 0x8c,
            0xc9, 0x4c, 0x3d, 0x4a, 0xf1, 0x7f, 0x58, 0xda, 0xee, 0x08, 0x9b, 0xa1, 0xfd, 0x44,
            0xe3, 0xdb, 0xd9, 0x8a, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x58, 0x02, 0x06, 0x95, 0x3c,
            0xb3, 0xaa, 0x4d, 0x8d, 0x4b, 0xd6, 0xd4, 0x28, 0xa3, 0xe8, 0xe3, 0xc2, 0xcc, 0x6f,
            0x26, 0xa2, 0xa9, 0x15, 0xfe, 0xcb, 0xcc, 0x1f, 0xf0, 0xf1, 0x1b, 0x49, 0x03, 0x05,
            0x00, 0x09, 0x03, 0xa0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05,
            0x02, 0x40, 0x42, 0x0f, 0x00, 0x06, 0x07, 0x00, 0x02, 0x03, 0x01, 0x04, 0x07, 0x08,
            0x18, 0xf6, 0x96, 0xec, 0xce, 0x6c, 0x3f, 0x3a, 0x0a, 0x64, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x40, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let transaction = SignedTransaction::from_bytes(&sigix).unwrap();
        assert_eq!(transaction.instructions.len(), 3);
        assert_eq!(
            transaction.instructions[0].program_id,
            pubkey!("ComputeBudget111111111111111111111111111111")
        );
        assert!(transaction.instructions[0].accounts.is_empty());
        assert_eq!(
            transaction.instructions[1].program_id,
            pubkey!("ComputeBudget111111111111111111111111111111")
        );
        assert!(transaction.instructions[1].accounts.is_empty());
        assert_eq!(
            transaction.instructions[2].accounts[0].pubkey,
            pubkey!("F8pqnWWBZKyTAZgxNNRGLVCkBqf6pbJvvPY38trMr7cF")
        );
        assert!(transaction.instructions[2].accounts[0].is_signer);
        assert_eq!(
            transaction.instructions[2].program_id,
            pubkey!("Gpu1L3Z6tHE6o1ksaBTASLNB4oUkoQe2qzQHqenK8bWd")
        );
        assert_eq!(transaction.instructions[2].accounts.len(), 7);
        let x = FinalizeTransaction::try_from(transaction).unwrap();
        println!("{:#?}", x);
    }
}
